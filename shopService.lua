local component = require('component')
local itemUtils = require('ItemUtils')
local event = require('event')
local internet = require('internet')
local serialization = require("serialization")
local fs = require('filesystem')
local os = require('os')

-- –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥—É–ª—å Database –ª–æ–∫–∞–ª—å–Ω–æ
local Database = {}
Database.__index = Database

function Database:new(directory)
    local obj = setmetatable({}, self)
    obj.directory = "/home/"..directory
    
    if not fs.exists(obj.directory) then
        fs.makeDirectory(obj.directory)
    end
    
    return obj
end

function Database:insert(key, value)
    local path = fs.concat(self.directory, tostring(key))
    local file = io.open(path, "w")
    if not file then return false end
    
    value._id = key
    local serialized = serialization.serialize(value)
    file:write(serialized)
    file:close()
    return true
end

function Database:update(key, value)
    return self:insert(key, value)
end

function Database:select(conditions)
    local results = {}
    
    for file in fs.list(self.directory) do
        local path = fs.concat(self.directory, file)
        local fh = io.open(path, 'r')
        if fh then
            local data = fh:read('*a')
            fh:close()
            local ok, record = pcall(serialization.unserialize, data)
            
            if ok and record then
                local match = true
                for _, condition in ipairs(conditions or {}) do
                    local field = condition.column
                    local value = condition.value
                    local operation = condition.operation or "=="
                    
                    if operation == "=" or operation == "==" then
                        if record[field] ~= value then match = false end
                    elseif operation == "~=" or operation == "!=" then
                        if record[field] == value then match = false end
                    elseif operation == "<" then
                        if not (record[field] < value) then match = false end
                    elseif operation == "<=" then
                        if not (record[field] <= value) then match = false end
                    elseif operation == ">" then
                        if not (record[field] > value) then match = false end
                    elseif operation == ">=" then
                        if not (record[field] >= value) then match = false end
                    end
                    
                    if not match then break end
                end
                
                if match then
                    table.insert(results, record)
                end
            end
        end
    end
    
    return results
end

-- –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º ShopService
ShopService = {}
ShopService.__index = ShopService

-- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Discord Webhook
local DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1366871469526745148/oW2yVyCNevcBHrXAmvKM1506GIWWFKkQ3oqwa2nNjd_KNDTbDR_c6_6le9TBewpjnTqy"

local function sendToDiscord(message)
    -- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    local function escapeJson(str)
        return str:gsub('\\', '\\\\'):gsub('"', '\\"'):gsub('\n', '\\n')
    end

    local content = escapeJson(message)
    local jsonData = string.format('{"content":"%s","username":"Minecraft Shop"}', content)
    
    -- –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    pcall(function()
        if component.isAvailable("internet") then
            local request = component.internet.request(
                DISCORD_WEBHOOK_URL,
                jsonData,
                {
                    ["Content-Type"] = "application/json",
                    ["User-Agent"] = "OC-Shop-Webhook"
                },
                "POST"
            )
            request.finishConnect()
        end
    end)
    
    return true
end

local function printD(message)
    -- –£–±–∏—Ä–∞–µ–º print(message) - –±–æ–ª—å—à–µ –Ω–µ –≤—ã–≤–æ–¥–∏–º –≤ –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    local success = sendToDiscord(message)
    -- –¢–∞–∫–∂–µ —É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–∫—Ä—ã—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    -- if not success then
    --     print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord")
    -- end
end

local function readObjectFromFile(path)
    local file, err = io.open(path, "r")
    if not file then
        return nil, "Failed to open file: " .. (err or "unknown error")
    end
  
    local content = file:read("*a")
    file:close()
  
    local obj = serialization.unserialize(content)
    if not obj then
        return nil, "Failed to unserialize content from file"
    end
  
    return obj
end

function ShopService:new(terminalName)
    local obj = {}
    setmetatable(obj, self)
    
    obj.terminalName = terminalName or "Bober Shop"
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    obj.oreExchangeList = readObjectFromFile("/home/config/oreExchanger.cfg") or {}
    obj.exchangeList = readObjectFromFile("/home/config/exchanger.cfg") or {}
    obj.sellShopList = readObjectFromFile("/home/config/sellShop.cfg") or {}
    obj.buyShopList = readObjectFromFile("/home/config/buyShop.cfg") or {}

    obj.currencies = {
        {item = {name = "minecraft:gold_nugget", damage = 0}, money = 1000},
        {item = {name = "minecraft:gold_ingot", damage = 0}, money = 10000},
        {item = {name = "minecraft:diamond", damage = 0}, money = 100000},
        {item = {name = "minecraft:emerald", damage = 0}, money = 1000000}
    }

    itemUtils.setCurrency(obj.currencies)
    
    obj.db = Database:new("USERS")
    
    -- –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ Discord
    printD("üîÑ " .. obj.terminalName .. " –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    -- –ú–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞
    function obj:dbClause(fieldName, fieldValue, typeOfClause)
        return {
            column = fieldName,
            value = fieldValue,
            operation = typeOfClause or "=="
        }
    end

    function obj:getOreExchangeList()
        return self.oreExchangeList
    end

    function obj:getExchangeList()
        return self.exchangeList
    end

    function obj:getSellShopList(category)
        local categorySellShopList = {}
        for i, sellConfig in pairs(self.sellShopList) do
            if sellConfig.category == category then
                table.insert(categorySellShopList, sellConfig)
            end
        end
        itemUtils.populateCount(categorySellShopList)
        return categorySellShopList
    end

    function obj:getBuyShopList()
        itemUtils.populateUserCount(self.buyShopList)
        return self.buyShopList
    end

    function obj:getBalance(nick)
        local playerData = self:getPlayerData(nick)
        return playerData and playerData.balance or 0
    end

    function obj:getItemCount(nick)
        local playerData = self:getPlayerData(nick)
        return playerData and #playerData.items or 0
    end

    function obj:getItems(nick)
        local playerData = self:getPlayerData(nick)
        return playerData and playerData.items or {}
    end

    function obj:sendSupportMessage(nick, message)
        if not message or message == "" then
            return false, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        end
        
        if #message > 500 then
            return false, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)"
        end
        
        -- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        local discordMessage = string.format("üì© **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: %s:**\n\n```%s```", nick, message)
        
        local success, err = sendToDiscord(discordMessage)
        
        if success then
            --print("üì© " .. nick .. " –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            return true, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
        else
           -- return false, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " .. tostring(err)
        end
    end

    function obj:depositMoney(nick, count)
        local countOfMoney = itemUtils.takeMoney(count)
        if countOfMoney > 0 then
            local playerData = self:getPlayerData(nick)
            playerData.balance = playerData.balance + countOfMoney
            self.db:insert(nick, playerData)
            printD("üí∞ " .. nick .. " –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ " .. countOfMoney .. " –≤ " .. obj.terminalName .. ". –ë–∞–ª–∞–Ω—Å: " .. playerData.balance)
            return playerData.balance, "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ " .. countOfMoney
        end
        return 0, "–ù–µ—Ç –º–æ–Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
    end

    function obj:withdrawMoney(nick, count)
        local playerData = self:getPlayerData(nick)
        if playerData.balance < count then
            return 0, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É"
        end
        
        local countOfMoney = itemUtils.giveMoney(count)
        if countOfMoney > 0 then
            playerData.balance = playerData.balance - countOfMoney
            self.db:insert(nick, playerData)
            printD("üí∏ " .. nick .. " —Å–Ω—è–ª " .. countOfMoney .. " –≤ " .. obj.terminalName .. ". –ë–∞–ª–∞–Ω—Å: " .. playerData.balance)
            return countOfMoney, "–° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ " .. countOfMoney
        end
        
        return 0, itemUtils.countOfAvailableSlots() > 0 and "–ù–µ—Ç –º–æ–Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ!" or "–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"
    end

    function obj:getPlayerData(nick)
        local playerDataList = self.db:select({self:dbClause("_id", nick)})
        
        if not playerDataList or not playerDataList[1] then
            local newPlayer = {_id = nick, balance = 0, items = {}}
            if not self.db:insert(nick, newPlayer) then
                printD("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ " .. nick .. " –≤ " .. obj.terminalName)
            else
                printD("üÜï –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ " .. nick .. " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ " .. obj.terminalName)
            end
            return newPlayer
        end
        
        return playerDataList[1]
    end

    function obj:withdrawItem(nick, id, dmg, count)
        local playerData = self:getPlayerData(nick)
        for i = 1, #playerData.items do
            local item = playerData.items[i]
            if item.id == id and item.dmg == dmg then
                local countToWithdraw = math.min(count, item.count)
                local withdrawedCount = itemUtils.giveItem(id, dmg, countToWithdraw)
                item.count = item.count - withdrawedCount
                
                if item.count == 0 then
                    table.remove(playerData.items, i)
                end
                
                self.db:update(nick, playerData)
                
                if withdrawedCount > 0 then
                    printD("üì§ " .. nick .. " –∑–∞–±—Ä–∞–ª " .. id .. ":" .. dmg .. " (x" .. withdrawedCount .. ") –∏–∑ " .. obj.terminalName)
                end
                return withdrawedCount, "–í—ã–¥–∞–Ω–æ " .. withdrawedCount .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
            end
        end
        return 0, "–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!"
    end

    function obj:sellItem(nick, itemCfg, count)
        local playerData = self:getPlayerData(nick)
        local totalPrice = count * itemCfg.price
        
        if playerData.balance < totalPrice then
            return false, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É"
        end
        
        local itemsCount = itemUtils.giveItem(itemCfg.id, itemCfg.dmg, count, itemCfg.nbt)
        if itemsCount > 0 then
            playerData.balance = playerData.balance - (itemsCount * itemCfg.price)
            self.db:update(nick, playerData)
            local itemName = itemCfg.label or (itemCfg.id .. ":" .. itemCfg.dmg)
            printD(":green_circle: ```**" .. nick .. "** –∫—É–ø–∏–ª " .. itemName .. " (x" .. itemsCount .. ") –ø–æ " .. itemCfg.price .. " –≤ " .. obj.terminalName .. ". –ë–∞–ª–∞–Ω—Å: " .. playerData.balance .. "```")
            return itemsCount, "–ö—É–ø–ª–µ–Ω–æ " .. itemsCount .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤!"
        end
        return 0, "–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"
    end

    function obj:buyItem(nick, itemCfg, count)
        local itemsCount = itemUtils.takeItem(itemCfg.id, itemCfg.dmg, count)
        if itemsCount > 0 then
            local playerData = self:getPlayerData(nick)
            playerData.balance = playerData.balance + (itemsCount * itemCfg.price)
            
            if not self.db:update(nick, playerData) then
                printD("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è " .. nick .. " –≤ " .. obj.terminalName)
                return 0, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            end
            
            local itemName = itemCfg.label or (itemCfg.id .. ":" .. itemCfg.dmg)
            printD(":green_circle: ```**" .. nick .. "** –ø—Ä–æ–¥–∞–ª " .. itemName .. " (x" .. itemsCount .. ") –ø–æ " .. itemCfg.price .. " –≤ " .. obj.terminalName .. ". –ë–∞–ª–∞–Ω—Å: " .. playerData.balance .. "```")
            return itemsCount, "–ü—Ä–æ–¥–∞–Ω–æ "..itemsCount.." –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
        end
        return 0, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã"
    end

    function obj:withdrawAll(nick)
        local playerData = self:getPlayerData(nick)
        local toRemove = {}
        local sum = 0
        
        for i = 1, #playerData.items do
            local item = playerData.items[i]
            local withdrawedCount = itemUtils.giveItem(item.id, item.dmg, item.count)
            sum = sum + withdrawedCount
            item.count = item.count - withdrawedCount
            
            if item.count == 0 then
                table.insert(toRemove, i)
            end
            
            if withdrawedCount > 0 then
                printD("üì¶ " .. nick .. " –∑–∞–±—Ä–∞–ª " .. item.id .. ":" .. item.dmg .. " (x" .. withdrawedCount .. ") –∏–∑ " .. obj.terminalName)
            end
        end
        
        for i = #toRemove, 1, -1 do
            table.remove(playerData.items, toRemove[i])
        end
        
        self.db:update(nick, playerData)
        
        if sum == 0 then
            return sum, itemUtils.countOfAvailableSlots() > 0 and "–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!" or "–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!"
        end
        return sum, "–í—ã–¥–∞–Ω–æ " .. sum .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤"
    end

    function obj:exchangeAllOres(nick)
        local items = {}
        for _, itemConfig in pairs(self.oreExchangeList) do
            table.insert(items, {id = itemConfig.fromId, dmg = itemConfig.fromDmg})
        end
        
        local itemsTaken = itemUtils.takeItems(items)
        local playerData = self:getPlayerData(nick)
        local sum = 0
        
        for _, item in pairs(itemsTaken) do
            sum = sum + item.count
            local itemCfg
            for _, itemConfig in pairs(self.oreExchangeList) do
                if item.id == itemConfig.fromId and item.dmg == itemConfig.fromDmg then
                    itemCfg = itemConfig
                    break
                end
            end
            
            printD("‚ôªÔ∏è " .. nick .. " –æ–±–º–µ–Ω—è–ª " .. itemCfg.fromId .. ":" .. itemCfg.fromDmg .. " (x" .. item.count .. ") –Ω–∞ " .. itemCfg.toId .. ":" .. itemCfg.toDmg .. " –≤ " .. obj.terminalName)
            
            local found = false
            for _, storedItem in ipairs(playerData.items) do
                if storedItem.id == itemCfg.toId and storedItem.dmg == itemCfg.toDmg then
                    storedItem.count = storedItem.count + (item.count * itemCfg.toCount / itemCfg.fromCount)
                    found = true
                    break
                end
            end
            
            if not found then
                table.insert(playerData.items, {
                    id = itemCfg.toId,
                    dmg = itemCfg.toDmg,
                    label = itemCfg.toLabel,
                    count = item.count * itemCfg.toCount / itemCfg.fromCount
                })
            end
        end
        
        self.db:update(nick, playerData)
        
        if sum == 0 then
            return 0, "–ù–µ—Ç —Ä—É–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
        end
        return sum, "–û–±–º–µ–Ω—è–Ω–æ " .. sum .. " —Ä—É–¥ –Ω–∞ —Å–ª–∏—Ç–∫–∏.", "–ó–∞–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    end

    function obj:exchangeOre(nick, itemConfig, count)
        local countOfItems = itemUtils.takeItem(itemConfig.fromId, itemConfig.fromDmg, count)
        if countOfItems > 0 then
            local playerData = self:getPlayerData(nick)
            local found = false
            
            for _, item in ipairs(playerData.items) do
                if item.id == itemConfig.toId and item.dmg == itemConfig.toDmg then
                    item.count = item.count + (countOfItems * itemConfig.toCount / itemConfig.fromCount)
                    found = true
                    break
                end
            end
            
            if not found then
                table.insert(playerData.items, {
                    id = itemConfig.toId,
                    dmg = itemConfig.toDmg,
                    label = itemConfig.toLabel,
                    count = countOfItems * itemConfig.toCount / itemConfig.fromCount
                })
            end
            
            self.db:update(nick, playerData)
            printD("‚ôªÔ∏è " .. nick .. " –æ–±–º–µ–Ω—è–ª " .. itemConfig.fromId .. ":" .. itemConfig.fromDmg .. " (x" .. countOfItems .. ") –Ω–∞ " .. itemConfig.toId .. ":" .. itemConfig.toDmg .. " –≤ " .. obj.terminalName)
            return countOfItems, "–û–±–º–µ–Ω—è–Ω–æ " .. countOfItems .. " —Ä—É–¥ –Ω–∞ —Å–ª–∏—Ç–∫–∏.", "–ó–∞–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
        end
        return 0, "–ù–µ—Ç —Ä—É–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
    end

    function obj:exchange(nick, itemConfig, count)
        local countOfItems = itemUtils.takeItem(itemConfig.fromId, itemConfig.fromDmg, count * itemConfig.fromCount)
        local countOfExchanges = math.floor(countOfItems / itemConfig.fromCount)
        local left = math.floor(countOfItems % itemConfig.fromCount)
        local updated = false
        local playerData = self:getPlayerData(nick)
        
        if left > 0 then
            updated = true
            local found = false
            
            for _, item in ipairs(playerData.items) do
                if item.id == itemConfig.fromId and item.dmg == itemConfig.fromDmg then
                    item.count = item.count + left
                    found = true
                    break
                end
            end
            
            if not found then
                table.insert(playerData.items, {
                    id = itemConfig.fromId,
                    dmg = itemConfig.fromDmg,
                    label = itemConfig.fromLabel,
                    count = left
                })
            end
        end
        
        if countOfExchanges > 0 then
            updated = true
            local found = false
            
            for _, item in ipairs(playerData.items) do
                if item.id == itemConfig.toId and item.dmg == itemConfig.toDmg then
                    item.count = item.count + (countOfExchanges * itemConfig.toCount)
                    found = true
                    break
                end
            end
            
            if not found then
                table.insert(playerData.items, {
                    id = itemConfig.toId,
                    dmg = itemConfig.toDmg,
                    label = itemConfig.toLabel,
                    count = countOfExchanges * itemConfig.toCount
                })
            end
            
            printD("üîÑ " .. nick .. " –æ–±–º–µ–Ω—è–ª " .. itemConfig.fromId .. ":" .. itemConfig.fromDmg .. " (x" .. countOfItems .. ") –Ω–∞ " .. itemConfig.toId .. ":" .. itemConfig.toDmg .. " –≤ " .. obj.terminalName)
        end
        
        if updated then
            self.db:update(nick, playerData)
            if countOfExchanges > 0 then
                return countOfItems, "–û–±–º–µ–Ω—è–Ω–æ " .. countOfItems .. " –ø—Ä–µ–¥–º–µ—Ç–æ–≤.", "–ó–∞–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
            end
        end
        
        return 0, "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!"
    end

    return obj
end

return ShopService